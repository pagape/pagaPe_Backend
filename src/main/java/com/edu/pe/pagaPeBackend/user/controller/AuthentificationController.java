package com.edu.pe.pagaPeBackend.user.controller;import com.edu.pe.pagaPeBackend.user.dto.AuthenticationResponse;import com.edu.pe.pagaPeBackend.user.dto.LoginRequest;import com.edu.pe.pagaPeBackend.user.dto.RegisterRequest;import com.edu.pe.pagaPeBackend.user.repository.UserRepository;import com.edu.pe.pagaPeBackend.user.service.AuthService;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.io.IOException;@CrossOrigin(origins = "*")@RestController@RequestMapping("/api/pagaPe/v1/auth")public class AuthentificationController {    @Autowired    private AuthService authService;    @Autowired    private UserRepository userRepository;    // URL: http://localhost:8081/api/thebigfun/v1/auth/register    // Method: POST    @Transactional    @PostMapping("/register")    public ResponseEntity<AuthenticationResponse> registerUser(@RequestBody RegisterRequest request) {        authService.existsUserByEmail(request);        authService.validateRegisterRequest(request);        AuthenticationResponse registeredUser = authService.register(request);        return new ResponseEntity<AuthenticationResponse>(registeredUser, HttpStatus.CREATED);    }    // URL: http://localhost:8081/api/thebigfun/v1/auth/login    // Method: POST    @Transactional    @PostMapping("/login")    public ResponseEntity<AuthenticationResponse> login(@RequestBody LoginRequest request) {        AuthenticationResponse loggedUser = authService.login(request);        // Agrega el ID del usuario a la respuesta        return new ResponseEntity<AuthenticationResponse>(loggedUser, HttpStatus.OK);    }    @PostMapping("/refresh-token")    public void refreshToken(            HttpServletRequest request,            HttpServletResponse response) throws IOException {        authService.refreshToken(request, response);    }    // URL: http://localhost:8081/api/thebigfun/v1/auth/solicitar-recuperacion    // Method: POST    @PostMapping("/solicitar-recuperacion")    public ResponseEntity<String> solicitarRecuperacion(@RequestParam String email) {        try {            authService.generateRecoveryCodeByEmail(email);            // Si llegamos a este punto, el correo ha sido enviado            return ResponseEntity.ok("Código de recuperación enviado a " + email);        } catch (Exception e) {            // Maneja la excepción como mejor te parezca. Puede ser un usuario no encontrado u otro error.            e.printStackTrace();            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al enviar el código de recuperación.");        }    }    // URL: http://localhost:8081/api/thebigfun/v1/auth/restablecer-contrasena    // Method: POST    @PostMapping("/restablecer-contrasena")    public ResponseEntity<String> restablecerContrasena(            @RequestParam String email,            @RequestParam String codigo,            @RequestParam String  newPassword) {        try {            boolean isPasswordReset = authService.resetPassword(email, codigo,  newPassword);            if (isPasswordReset) {                return ResponseEntity.ok("Contraseña actualizada con éxito");            } else {                return ResponseEntity.badRequest().body("Código de recuperación inválido o usuario no encontrado");            }        } catch (Exception e) {            // Maneja la excepción como mejor te parezca. Puede ser un error de correspondencia de código, etc.            e.printStackTrace();            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al restablecer la contraseña.");        }    }    // controller/AuthentificationController.java//    @PostMapping("/verify-coupon")//    public ResponseEntity<?> verifyCoupon(@RequestBody CouponRequest couponRequest) {//        boolean isValid = couponService.validateCoupon(couponRequest.getCouponCode());//        if (isValid) {//            return ResponseEntity.ok("Coupon is valid");//        } else {//            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid or expired coupon");//        }//    }}