package com.edu.pe.pagaPeBackend.user.model;import com.fasterxml.jackson.annotation.JsonIgnore;import jakarta.persistence.*;import lombok.*;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.sql.Blob;import java.time.LocalDateTime;import java.util.Collection;import java.util.List;@Data@Builder@AllArgsConstructor@NoArgsConstructor@Entity@Table(name="users")@Getter@Setterpublic class User implements UserDetails {        @Id        @GeneratedValue(strategy = GenerationType.IDENTITY)        private Long id;        @Column(name="user_first_name", nullable = false, length = 50)        private String userFirstName;        @Column(name="user_last_name", nullable = false, length = 50)        private String userLastName;        @Column(name="user_email", nullable = false, length = 50)        private String userEmail;        @Column(name="user_password", nullable = false, length = 100)        private String userPassword;        @Column(name="user_phone", nullable = true, length = 50)        private String userPhone;        @Column(name="user_dni", nullable = true, length = 8)        private String userDNI;        @Column(name="image_data", nullable = true)        private String imageData;        @Column(name = "recovery_code",nullable = true)        private String recoveryCode;        @Enumerated(EnumType.STRING)        @Column(length = 50, name = "role", nullable = false)        private Roles role;        @Column(name = "last_login")        private LocalDateTime lastLogin;        @Column(nullable = false)        private boolean active ;        @JsonIgnore        @OneToMany(mappedBy = "user", cascade = CascadeType.REMOVE, orphanRemoval = true)        private List<Token> tokens;        @Override        public Collection<? extends GrantedAuthority> getAuthorities() {                return List.of(new SimpleGrantedAuthority(role.name()));        }        @JsonIgnore        @Lob        private Blob image;        public Blob getImage() {                return image;        }        public void setImage(Blob image) {                this.image = image;        }        @Override        public String getPassword() {                return userPassword;        }        @Override        public String getUsername()        {                return userEmail;        }        @Override        public boolean isAccountNonExpired() {                return true;        }        @Override        public boolean isAccountNonLocked() {                return true;        }        @Override        public boolean isCredentialsNonExpired() {                return true;        }        @Override        public boolean isEnabled() {                return true;        }        public boolean getActive() {return active;        }}